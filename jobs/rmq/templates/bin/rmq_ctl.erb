#!/bin/bash

# Control script for launching RabbitMQ
# Detail on RabbitMQ environment variables is here: https://www.rabbitmq.com/relocate.html

set -e
set -u

export LANG="en_US.UTF-8"
export PATH="${PATH}:/var/vcap/packages/erlang/bin/"
export HOME="/home/vcap"

export JOB_NAME="rmq"
export RUN_DIR="/var/vcap/sys/run/${JOB_NAME}"
export TMP_DIR="/var/vcap/sys/tmp/${JOB_NAME}"
export STORE_DIR="/var/vcap/store/${JOB_NAME}"

export RABBITMQ_HOME="/var/vcap/packages/${JOB_NAME}"
export RABBITMQ_PID_FILE="${RUN_DIR}/rmq.pid"
export RABBITMQ_LOG_BASE="/var/vcap/sys/log/${JOB_NAME}"
export RABBITMQ_MNESIA_DIR="${STORE_DIR}"
export RABBITMQ_ENABLED_PLUGINS_FILE="${STORE_DIR}/enabled_plugins"
export RABBITMQ_PLUGINS_EXPAND_DIR="${RUN_DIR}/plugins_expand"

rabbit_api_user_name="<%= p('rmq.username') %>"
rabbit_api_user_password="<%= p('rmq.password') %>"

# RabbitMQ will use $HOSTNAME to name the cluster node. In BOSH our $HOSTNAME is a random UUID.
# The random UUID changes when BOSH re-creates a server and re-attaches the persistent disk. 
# That breaks rabbit and causes it to no longer start. To avoid this we are replacing the BOSH
# UUID hostname with a deterministic hostname based on the data we get from BOSH.
export BOSH_RABBITMQ_NODE_UNIQUE_ID="<%= name %><%= index %>"
export BOSH_RABBITMQ_NODE_IP="<%= spec.networks.send(spec.networks.methods(false).first).ip %>"
export BOSH_RABBITMQ_HOSTS_LINE="${BOSH_RABBITMQ_NODE_IP} ${BOSH_RABBITMQ_NODE_UNIQUE_ID}"
export HOSTNAME=${BOSH_RABBITMQ_NODE_UNIQUE_ID}

export BOSH_HOSTS_FILE_TOKEN="##-start-of-bosh-additions-##"

function directory_setup {
  for dir in ${RUN_DIR} ${TMP_DIR} ${STORE_DIR} ${RABBITMQ_LOG_BASE}
  do
    mkdir -p ${dir}
    chown vcap:vcap ${dir}
    chmod 775 ${dir}
  done
}

function hosts_file_setup {
  # The first time we run, write the start token
  if grep -q "${BOSH_HOSTS_FILE_TOKEN}" /etc/hosts
    then true
    else
      echo -e "\n${BOSH_HOSTS_FILE_TOKEN}\n" >> /etc/hosts
  fi

  # Every time we run, replace the BOSH hosts file content
  local bosh_host_file_content="${BOSH_HOSTS_FILE_TOKEN}\n${BOSH_RABBITMQ_HOSTS_LINE}\n"
  perl -0777 -p -i -e "s|${BOSH_HOSTS_FILE_TOKEN}(.*\n)+\Z|${bosh_host_file_content}|g" /etc/hosts
}

function user_exists {
  user=$1
  if chpst -u vcap:vcap ${rabbitmqctl} list_users  | grep -q -P "^${user}\t"
    then return 0
    else return 1
  fi
}

function user_setup {
  local rabbitmqctl="${RABBITMQ_HOME}/sbin/rabbitmqctl"
  chpst -u vcap:vcap ${rabbitmqctl} wait ${RABBITMQ_PID_FILE}

  if user_exists "guest"
    then
      chpst -u vcap:vcap ${rabbitmqctl} delete_user guest
  fi

  if user_exists "${rabbit_api_user_name}"
    then true
    else chpst -u vcap:vcap ${rabbitmqctl} add_user ${rabbit_api_user_name} ${rabbit_api_user_password}
  fi

  chpst -u vcap:vcap ${rabbitmqctl} change_password ${rabbit_api_user_name} ${rabbit_api_user_password}
  chpst -u vcap:vcap ${rabbitmqctl} set_user_tags ${rabbit_api_user_name} management administrator
}

function perform_action {
  action=${1}
  case ${action} in

    start)
      cd ${RUN_DIR}
      chpst -u vcap:vcap ${RABBITMQ_HOME}/sbin/rabbitmq-plugins enable rabbitmq_management
      chpst -u vcap:vcap ${RABBITMQ_HOME}/sbin/rabbitmq-server start &
      user_setup
      ;;

    stop)
      cd ${RUN_DIR}
      chpst -u vcap:vcap ${RABBITMQ_HOME}/sbin/rabbitmqctl stop
      ;;

    *)
      echo "Usage: rmq_ctl {start|stop}"
      ;;

  esac
  exit 0
}

# Main
directory_setup "rmq"
hosts_file_setup
perform_action ${1}
