#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# -------------------------------------------------------------
# TODO START - refactor to a common location
# -------------------------------------------------------------

function wait_pidfile() {
  local pidfile=$1
  local try_kill=$2
  local timeout=${3:-0}
  local force=${4:-0}
  local countdown=$(( $timeout * 10 ))

  if [ -f "$pidfile" ]; then
    pid=$(head -1 "$pidfile")

    if [ -z "$pid" ]; then
      echo "Unable to get pid from $pidfile"
      exit 1
    fi

    if [ -e /proc/$pid ]; then
      if [ "$try_kill" = "1" ]; then
        echo "Killing $pidfile: $pid "
        kill $pid
      fi
      while [ -e /proc/$pid ]; do
        sleep 0.1
        [ "$countdown" != '0' -a $(( $countdown % 10 )) = '0' ] && echo -n .
        if [ $timeout -gt 0 ]; then
          if [ $countdown -eq 0 ]; then
            if [ "$force" = "1" ]; then
              echo -ne "\nKill timed out, using kill -9 on $pid... "
              kill -9 $pid
              sleep 0.5
            fi
            break
          else
            countdown=$(( $countdown - 1 ))
          fi
        fi
      done
      if [ -e /proc/$pid ]; then
        echo "Timed Out"
      else
        echo "Stopped"
      fi
    else
      echo "Process $pid is not running"
    fi

    rm -f $pidfile
  else
    echo "Pidfile $pidfile doesn't exist"
  fi
}

function kill_and_wait() {
  local pidfile=$1
  local timeout=${2:-25}
  local force=${3:-1}
  wait_pidfile $pidfile 1 $timeout $force
}

function pid_guard() {
  local pidfile=$1
  local name=$2

  if [ -f "$pidfile" ]; then
    pid=$(head -1 "$pidfile")

    if [ -n "$pid" ] && [ -e /proc/$pid ]; then
      echo "$name is already running, please stop it first"
      exit 1
    fi

    echo "Removing stale pidfile..."
    rm $pidfile
  fi
}

# -------------------------------------------------------------
# TODO END - refactor to a common location
# -------------------------------------------------------------

function directory_setup {

    JOB_NAME="${1}"
    export PKG_DIR="/var/vcap/packages/$JOB_NAME"
    export JOB_DIR="/var/vcap/jobs/$JOB_NAME"
    export RUN_DIR="/var/vcap/sys/run/$JOB_NAME"
    export LOG_DIR="/var/vcap/sys/log/$JOB_NAME"
    export TMP_DIR="/var/vcap/sys/tmp/$JOB_NAME"
    export STORE_DIR="/var/vcap/store/$JOB_NAME"

    for dir in ${RUN_DIR} ${LOG_DIR} ${TMP_DIR} ${STORE_DIR}
    do
      mkdir -p ${dir}
      chown vcap:vcap ${dir}
      chmod 775 ${dir}
    done

    export TMPDIR=$TMP_DIR
    export PID_FILE=${RUN_DIR}/${JOB_NAME}.pid
}

function perform_action {

  action=${1}

  case ${action} in

    start)
      pid_guard $PID_FILE $JOB_NAME
      chpst -u vcap:vcap ${PKG_DIR}/cf-rabbitmq-broker ${JOB_DIR}/config/rmq_broker_config.json 2>${LOG_DIR}/${JOB_NAME}_stderr.log 1>${LOG_DIR}/${JOB_NAME}_stdout.log &
      echo "$!" > $PID_FILE
      disown
      ;;

    stop)
      kill_and_wait $PID_FILE
      ;;

    *)
      echo "Usage: rmq_broker_ctl {start|stop}"
      ;;

  esac
  exit 0

}

#
# Main
#

action=${1}
directory_setup "rmq_broker"
perform_action ${action}
